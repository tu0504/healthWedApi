// <auto-generated />
using System;
using HEALTH_SUPPORT.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HEALTH_SUPPORT.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250220113237_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.AccountSurvey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SurveyId");

                    b.ToTable("AccountSurveys");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.ProgramData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProgramName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("ProgramDatas");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.ProgramProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("CompletePercent")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProgramDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProgramDataId");

                    b.ToTable("ProgramProgresses");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.ProgramRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ProgramDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("RegistrationDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProgramDataId");

                    b.ToTable("ProgramRegistrations");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SurveyTpyeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyTpyeId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentQ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Validity")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyTypeId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountSurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountSurveyId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyResults");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SurveyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurveyTypes");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Account", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.AccountSurvey", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Account", "Account")
                        .WithMany("AccountSurveys")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Survey", "Survey")
                        .WithMany("AccountSurveys")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Appointment", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Account", "Account")
                        .WithMany("Appointments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.ProgramProgress", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Account", "Account")
                        .WithMany("ProgramProgresses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.ProgramData", "ProgramData")
                        .WithMany("ProgramProgresses")
                        .HasForeignKey("ProgramDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ProgramData");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.ProgramRegistration", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Account", "Account")
                        .WithMany("ProgramRegistrations")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.ProgramData", "ProgramData")
                        .WithMany("ProgramRegistrations")
                        .HasForeignKey("ProgramDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("ProgramData");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Survey", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.SurveyType", "SurveyType")
                        .WithMany("Surveys")
                        .HasForeignKey("SurveyTpyeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SurveyType");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyAnswer", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.SurveyType", "SurveyType")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("SurveyType");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyResults", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.AccountSurvey", "AccountSurvey")
                        .WithMany("SurveyResults")
                        .HasForeignKey("AccountSurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Survey", "Survey")
                        .WithMany("SurveyResults")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountSurvey");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Account", b =>
                {
                    b.Navigation("AccountSurveys");

                    b.Navigation("Appointments");

                    b.Navigation("ProgramProgresses");

                    b.Navigation("ProgramRegistrations");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.AccountSurvey", b =>
                {
                    b.Navigation("SurveyResults");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.ProgramData", b =>
                {
                    b.Navigation("ProgramProgresses");

                    b.Navigation("ProgramRegistrations");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Survey", b =>
                {
                    b.Navigation("AccountSurveys");

                    b.Navigation("SurveyQuestions");

                    b.Navigation("SurveyResults");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyType", b =>
                {
                    b.Navigation("SurveyQuestions");

                    b.Navigation("Surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
