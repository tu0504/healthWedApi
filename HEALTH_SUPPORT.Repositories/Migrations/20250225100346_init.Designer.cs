// <auto-generated />
using System;
using HEALTH_SUPPORT.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HEALTH_SUPPORT.Repositories.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250225100346_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("LoginDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5b0884a0-0067-49f5-b3be-a29ef58aa70c"),
                            Address = "123 Admin Street",
                            CreateAt = new DateTimeOffset(new DateTime(2025, 2, 25, 10, 3, 46, 310, DateTimeKind.Unspecified).AddTicks(856), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin@example.com",
                            Fullname = "Manager1 nè",
                            IsDeleted = false,
                            LoginDate = new DateTimeOffset(new DateTime(2025, 2, 25, 10, 3, 46, 310, DateTimeKind.Unspecified).AddTicks(861), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "$2a$11$dLwVOAicRSv1oW86FTp4re7iwnerRRYuxUjABkKgFK2dGSwDQRVVm",
                            Phone = "0123456789",
                            RoleId = new Guid("2a5f5c96-cb79-40d4-a604-d484b7041e7f"),
                            UseName = "Manager1"
                        },
                        new
                        {
                            Id = new Guid("dad2a80f-70e4-49f6-b3c5-3c1eedf525e4"),
                            Address = "123 Admin Street",
                            CreateAt = new DateTimeOffset(new DateTime(2025, 2, 25, 10, 3, 46, 453, DateTimeKind.Unspecified).AddTicks(4081), new TimeSpan(0, 0, 0, 0, 0)),
                            Email = "admin2@example.com",
                            Fullname = "Manager2 nè",
                            IsDeleted = false,
                            LoginDate = new DateTimeOffset(new DateTime(2025, 2, 25, 10, 3, 46, 453, DateTimeKind.Unspecified).AddTicks(4087), new TimeSpan(0, 0, 0, 0, 0)),
                            PasswordHash = "$2a$11$SnLd4xdo9Rj2w86iPPToiuoM89r12sTcirPk7R2UW9juR.REg5alu",
                            Phone = "0123456789",
                            RoleId = new Guid("2a5f5c96-cb79-40d4-a604-d484b7041e7f"),
                            UseName = "Manager2"
                        });
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.AccountSurvey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SurveyId");

                    b.ToTable("AccountSurveys");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("PsychologistId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PsychologistId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.HealthData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("FollowUpAppoint")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("PsychologistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("PsychologistId");

                    b.ToTable("HealthData");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SubscriptionDataId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("SubscriptionDataId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Psychologist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Psychologist");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2a5f5c96-cb79-40d4-a604-d484b7041e7f"),
                            IsDeleted = false,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("7d9d691a-58dc-48fd-9204-ffe02c4fd0fd"),
                            IsDeleted = false,
                            Name = "Student"
                        },
                        new
                        {
                            Id = new Guid("b6286c3e-1e4b-41ce-81e5-cc9a27ffe2e7"),
                            IsDeleted = false,
                            Name = "Parent"
                        },
                        new
                        {
                            Id = new Guid("5fff93bf-2324-425b-8f04-6a80af3bb0d3"),
                            IsDeleted = false,
                            Name = "Psychologist"
                        });
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SubscriptionData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("PsychologistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SubscriptionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PsychologistId");

                    b.ToTable("SubscriptionDatas");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SubscriptionProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("SubscriptionProgresses");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("SurveyTpyeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyTpyeId");

                    b.ToTable("Surveys");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("Point")
                        .HasColumnType("int");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("SurveyAnswers");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentQ")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Validity")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("SurveyTypeId");

                    b.ToTable("SurveyQuestions");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyResults", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountSurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ResultDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AccountSurveyId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyResults");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SurveyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurveyTypes");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreateAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("ModifiedAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Account", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Role", "Role")
                        .WithMany("Accounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.AccountSurvey", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Account", "Account")
                        .WithMany("AccountSurveys")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Survey", "Survey")
                        .WithMany("AccountSurveys")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Appointment", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Account", "Account")
                        .WithMany("Appointments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Psychologist", "Psychologist")
                        .WithMany("Appointments")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.HealthData", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Account", "Account")
                        .WithMany("HealthDatas")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Psychologist", "Psychologist")
                        .WithMany("HealthDatas")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Psychologist");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Order", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Account", "Accounts")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.SubscriptionData", "SubscriptionData")
                        .WithMany("Orders")
                        .HasForeignKey("SubscriptionDataId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("SubscriptionData");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SubscriptionData", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Category", "Category")
                        .WithMany("SubscriptionDatas")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Psychologist", "Psychologists")
                        .WithMany("SubscriptionDatas")
                        .HasForeignKey("PsychologistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Psychologists");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SubscriptionProgress", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.SubscriptionData", "Subscription")
                        .WithMany("SubscriptionProgresses")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Survey", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.SurveyType", "SurveyType")
                        .WithMany("Surveys")
                        .HasForeignKey("SurveyTpyeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SurveyType");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyAnswer", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.SurveyQuestion", "SurveyQuestion")
                        .WithMany("SurveyAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyQuestion", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Survey", "Survey")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.SurveyType", "SurveyType")
                        .WithMany("SurveyQuestions")
                        .HasForeignKey("SurveyTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("SurveyType");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyResults", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.AccountSurvey", "AccountSurvey")
                        .WithMany("SurveyResults")
                        .HasForeignKey("AccountSurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Survey", "Survey")
                        .WithMany("SurveyResults")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountSurvey");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Transaction", b =>
                {
                    b.HasOne("HEALTH_SUPPORT.Repositories.Entities.Order", "Order")
                        .WithMany("Transaction")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Account", b =>
                {
                    b.Navigation("AccountSurveys");

                    b.Navigation("Appointments");

                    b.Navigation("HealthDatas");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.AccountSurvey", b =>
                {
                    b.Navigation("SurveyResults");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Category", b =>
                {
                    b.Navigation("SubscriptionDatas");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Order", b =>
                {
                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Psychologist", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HealthDatas");

                    b.Navigation("SubscriptionDatas");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Role", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SubscriptionData", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("SubscriptionProgresses");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.Survey", b =>
                {
                    b.Navigation("AccountSurveys");

                    b.Navigation("SurveyQuestions");

                    b.Navigation("SurveyResults");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyQuestion", b =>
                {
                    b.Navigation("SurveyAnswers");
                });

            modelBuilder.Entity("HEALTH_SUPPORT.Repositories.Entities.SurveyType", b =>
                {
                    b.Navigation("SurveyQuestions");

                    b.Navigation("Surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
